{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.accessTokenKey = 'access_token';\n      this.refreshTokenKey = 'refresh_token';\n      this.authUrl = environment.apiUrl + 'auth/token/';\n    }\n    // Methods to manage access and refresh tokens\n    getAccessToken() {\n      return localStorage.getItem(this.accessTokenKey);\n    }\n    getRefreshToken() {\n      return localStorage.getItem(this.refreshTokenKey);\n    }\n    setAccessToken(token) {\n      localStorage.setItem(this.accessTokenKey, token);\n    }\n    setRefreshToken(token) {\n      localStorage.setItem(this.refreshTokenKey, token);\n    }\n    clearTokens() {\n      localStorage.removeItem(this.accessTokenKey);\n      localStorage.removeItem(this.refreshTokenKey);\n    }\n    // Method to handle user logout\n    logout() {\n      this.clearTokens();\n      // Redirect the user to the login page or do any additional cleanup if needed\n      // For example: this.router.navigate(['/login']);\n    }\n    // Method to handle token refreshing\n    refreshAccessToken(refreshToken) {\n      const refreshEndpoint = `${this.authUrl}/refresh/`; // Replace this with the API endpoint to refresh tokens\n      return this.http.post(refreshEndpoint, {\n        refreshToken\n      }).pipe(tap(response => {\n        // Update the access token in the storage\n        this.setAccessToken(response.access_token);\n      }), catchError(error => {\n        // Handle refresh token error, you might want to handle this differently\n        console.error('Token refresh error:', error);\n        return of('');\n      }));\n    }\n    // Method to handle user login (assuming you get the tokens from the server upon successful login)\n    login(params) {\n      return this.http.post(this.authUrl, params).pipe(tap(response => {\n        // Save the access and refresh tokens to the storage\n        this.setAccessToken(response.access);\n        localStorage.setItem(this.refreshTokenKey, response.refresh);\n      }), catchError(error => {\n        console.error('Login error:', error);\n        return of(false);\n      }));\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}