{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"../services/key-formatter.service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(authService, keyFormatter) {\n      this.authService = authService;\n      this.keyFormatter = keyFormatter;\n    }\n    intercept(request, next) {\n      // Get the access token\n      const accessToken = this.authService.getAccessToken();\n      // Clone the request and add the Authorization header if the access token exists\n      if (accessToken) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        });\n      }\n      // Continue with the request\n      return next.handle(request).pipe(catchError(error => {\n        // If the request returns an error, check for unauthorized response\n        if (error.status === 401) {\n          // Get the refresh token\n          const refreshToken = this.authService.getRefreshToken();\n          // If there is no refresh token, the user is not authenticated or tokens have expired\n          if (!refreshToken) {\n            this.authService.logout(); // You can implement the logout method in AuthService\n            return throwError('User not authenticated or tokens have expired.');\n          }\n          // If there is a refresh token, try to refresh the access token\n          return this.authService.refreshAccessToken(refreshToken).pipe(switchMap(newAccessToken => {\n            // Update the access token\n            this.authService.setAccessToken(newAccessToken);\n            // Clone the original request and add the new access token in the header\n            const authReq = request.clone({\n              setHeaders: {\n                Authorization: `Bearer ${newAccessToken}`\n              }\n            });\n            // Retry the request with the new access token\n            return next.handle(authReq);\n          }), catchError(refreshError => {\n            this.authService.logout(); // Handle refresh token error, you might want to handle this differently\n            return throwError(refreshError);\n          }));\n        }\n        // For other errors, just pass them along\n        return throwError(error);\n      }), map(event => {\n        // If it's an HttpResponse, process the response body to format the keys\n        if (event instanceof HttpResponse) {\n          return event.clone({\n            body: this.formatKeys(event.body)\n          });\n        }\n        return event;\n      }));\n    }\n    formatKeys(data) {\n      if (!data || typeof data !== 'object') {\n        return data;\n      }\n      if (Array.isArray(data)) {\n        return data.map(item => this.formatKeys(item));\n      }\n      const formattedData = {};\n      for (const key in data) {\n        if (data.hasOwnProperty(key)) {\n          const formattedKey = this.keyFormatter.toCamelCase(key);\n          formattedData[formattedKey] = this.formatKeys(data[key]);\n        }\n      }\n      return formattedData;\n    }\n    static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.KeyFormatterService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}